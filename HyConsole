#!/usr/bin/python3
import requests, sys, time, psutil, os
import pytermgui as gui
from pytermgui import WindowManager, Window
# this program will be used to gather data on players from the Hypixel minecraft server via command line
# keep in mind I have no affiliation with the Hypixel server

#terminal stuff
ppid = os.getppid()
if psutil.Process(ppid).name() == "py.exe":
    print("Program possibly ran via cmd prompt - please note that running from CMD will cause a ton of errors.")
elif psutil.Process(ppid).name() == "pythonw.exe":
    print("Program ran via Python IDLE - this will cause a ton of errors.")
    print("Exitting...")
    exit()

#parameters, you will ned your api key which can be gained by doing /api new on the hypixel server
print("enter api key")
apikey = str(input())
print("input username")
username = str(input())

#checking if the username is valid
validitytest = requests.get(url = f"https://api.mojang.com/users/profiles/minecraft/{username}?").json()
try:
    validitytest = str(validitytest["name"])
    if validitytest == username:
        print("Valid")
except Exception:
    print("Invalid or Wrong Username!")
    exit()
manager = WindowManager()

#getting data
playerdata = requests.get(
    url = "https://api.hypixel.net/player", params = {
        "key": apikey,
        "name": username}).json()
uuid = requests.get(url = "https://api.mojang.com/users/profiles/minecraft/" + username + "?").json()
uuid = str(uuid["id"])
skyblockdata = requests.get(
    url = "https://api.hypixel.net/skyblock", params = {
        "key": apikey,
        "uuid": uuid}).json()
leaderboarddata = requests.get(
                        url = "https://api.hypixel.net/leaderboards", params = {
                                "key": apikey
                        }
                ).json()

#checking if the player is online
online = requests.get(
    url = "https://api.hypixel.net/status", params = {
        "key": apikey,
        "uuid": uuid
    }
).json()["session"]["online"]
#setting up windows that will be opened later
#these here are all of the games for the leaderboards
online = False
UHC = (
    Window(min_width=50)
    +"Here are the leaderboard options for UHC"
    )
SURVIVAL_GAMES = (
    Window(min_width=50)
    +"Here are the leaderboard options for Survival Games")
QUAKECRAFT = (
    Window(min_width=50)
    +"Here are the leaderboard options for QuakeCraft")
TNTGAMES = (
    Window(min_width=50)
    +"Here are the leaderboard options for TNT Games")
WALLS = (
    Window(min_width=50)
    +"Here are the leaderboard options for Walls")
MURDER_MYSTERY = (
    Window(min_width=50)
    +"Here are the leaderboard options for Murder Mystery")
BUILD_BATTLE = (
    Window(min_width=50)
    +"Here are the leaderboard options for Build Battle")
ARCADE = (
    Window(min_width=50)
    +"Here are the leaderboard options for Arcade")
BEDWARS = (
    Window(min_width=50)
    +"Here are the leaderboard options for BedWars")
DUELS = (
    Window(min_width=50)
    +"Here are the leaderboard options for Duels")
ARENA = (
    Window(min_width=50)
    +"Here are the leaderboard options for Arena")
SPEED_UHC = (
    Window(min_width=50)
    +"Here are the leaderboard options for Speed UHC")
SKYWARS = (
    Window(min_width=50)
    +"Here are the leaderboard options for SkyWars")
LeaderboardMenu = (
    Window(min_width=50)
    +"Use this menu to navigate Leaderboards"
    + ["UHC", lambda *_: manager.add(UHC.copy().center())]
    + ["SURVIVAL_GAMES", lambda *_: manager.add(UHC.copy().center())] 
    + ["QUAKECRAFT", lambda *_: manager.add(SURVIVAL_GAMES.copy().center())]
    + ["TNTGAMES", lambda *_: manager.add(TNTGAMES.copy().center())]
    + ["WALLS", lambda *_: manager.add(WALLS.copy().center())]
    + ["MURDER_MYSTERY", lambda *_: manager.add(MURDER_MYSTERY.copy().center())]
    + ["BUILD_BATTLE", lambda *_: manager.add(BUILD_BATTLE.copy().center())]
    + ["ARCADE", lambda *_: manager.add(ARCADE.copy().center())]
    + ["BEDWARS", lambda *_: manager.add(BEDWARS.copy().center())]
    + ["DUELS", lambda *_: manager.add(DUELS.copy().center())]
    + ["ARENA", lambda *_: manager.add(ARENA.copy().center())]
    + ["SPEED_UHC", lambda *_: manager.add(SPEED_UHC.copy().center())]
    + ["SKYWARS", lambda *_: manager.add(SKYWARS.copy().center())]
    + ["exit", lambda *_: sys.exit(0)]
)


def bedwarswindow():
    bedwarscoins = playerdata["player"]["stats"]["Bedwars"]["coins"]
    bedwarsgames = playerdata["player"]["stats"]["Bedwars"]["games_played_bedwars"]
    bedwarskills = playerdata["player"]["stats"]["Bedwars"]["kills_bedwars"]
    bedsbroken = playerdata["player"]["stats"]["Bedwars"]["beds_broken_bedwars"]
    bedwarswins = playerdata["player"]["stats"]["Bedwars"]["wins_bedwars"]
    BedWars = (
    Window(min_width=50)
    +"coins:"
    +f"{str(bedwarscoins)}"
    +"kills:"
    +f"{str(bedwarskills)}"
    +"wins:"
    +f"{str(bedwarswins)}"
    +"games played:"
    +f"{str(bedwarsgames)}"
    +"beds broken:"
    +f"{str(bedsbroken)}")

    manager.add(BedWars.copy().center())
def skywarswindow():
    skywarscoins = playerdata["player"]["stats"]["SkyWars"]["coins"]
    skywarswins = playerdata["player"]["stats"]["SkyWars"]["wins"]
    skywarskills = playerdata["player"]["stats"]["SkyWars"]["kills"]
    skywarsgames = playerdata["player"]["stats"]["SkyWars"]["games"]
    SkyWars = (Window(min_width=50)
    +"coins:"
    +f"{str(skywarscoins)}"
    +"kills:"
    +f"{str(skywarskills)}"
    +"wins:"
    +f"{str(skywarswins)}"
    +"games played:"
    +f"{str(skywarsgames)}")
    manager.add(SkyWars.copy().center())

#navigating non leaderboard stats
ProfileMenu = (
    Window(min_width=50)
    +"Use this menu to navigate various gamemodes, more will be coming later on"
    + ["BedWars", lambda *_: bedwarswindow()]
    + ["SkyWars", lambda *_: bedwarswindow()]
    + ["exit", lambda *_: sys.exit(0)]
)

#windows for skyblock wip
pets = (Window(min_width=50))

coins = (Window(min_width=50))

FarmingS = (Window(min_width=50))
MiningS = (Window(min_width=50))
CombatS = (Window(min_width=50))
ForagingS = (Window(min_width=50))
FishingS= (Window(min_width=50))
EnchantingS= (Window(min_width=50))
AlchemyS= (Window(min_width=50))
TamingS= (Window(min_width=50))
DungeonS = (Window(min_width=50))

skills = (
    Window(min_width=50)
    + ["Farming", lambda *_: manager.add(FarmingS.copy().center())]
    + ["Mining", lambda *_: manager.add(MiningS.copy().center())]
    + ["Combat", lambda *_: manager.add(CombatS.copy().center())]
    + ["Fishing", lambda *_: manager.add(FishingS.copy().center())]
    + ["Alchemy", lambda *_: manager.add(AlchemyS.copy().center())]

)
FarmingC = (Window(min_width=50))
MiningC = (Window(min_width=50))
CombatC = (Window(min_width=50))
ForagingC = (Window(min_width=50))
FishingC = (Window(min_width=50))
BossC = (Window(min_width=50))

collections = (Window(min_width=50))

SkyblockMenu = (
    Window(min_width=50)
    +"Use this menu to navigate Skyblock Profiles"
    +gui.InputField(prompt="What profile do you wish to view")
    + ["exit", lambda *_: sys.exit(0)]
)

#main menu first one you see when starting hyconsole
Mainmenu = (
    Window(min_width=50)
    + "welcome to HyConsole"
    + "use the gui to navigate player stats and leaderboards"
    +"you are currently viewing the profile of:"
    +f"{username}"
    +"online:"
    +f"{online}"
    + ["Profile", lambda *_: manager.add(ProfileMenu.copy().center())]
    + ["Leaderboard", lambda *_: manager.add(LeaderboardMenu.copy().center())]
    + ["Skyblock", lambda *_: manager.add(SkyblockMenu.copy().center()), lambda *_:mainM.close()]
    + ["exit", lambda *_: sys.exit(0)]
)
#starting the window
mainM = manager.add(Mainmenu)
manager.run()
